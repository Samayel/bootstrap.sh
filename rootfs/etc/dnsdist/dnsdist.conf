
--
-- https://ds9a.nl/tmp/dnsdist-md/dnsdist-diagrams.md.html
-- https://strongarm.io/blog/secure-open-dns-resolver/
-- https://dnsprivacy.org/wiki/display/DP/Using+dnsdist+for+DoT+and+DoH
--

setLocal('0.0.0.0:53')
addLocal('[::]:53')

addTLSLocal("0.0.0.0:853", "/etc/ssl/letsencrypt/dox.quyo.net/ec-fullchain.pem", "/etc/ssl/letsencrypt/dox.quyo.net/ec-key.pem")
addTLSLocal("[::]:853", "/etc/ssl/letsencrypt/dox.quyo.net/ec-fullchain.pem", "/etc/ssl/letsencrypt/dox.quyo.net/ec-key.pem")

-- addDOHLocal("0.0.0.0:443", "/etc/ssl/letsencrypt/dox.quyo.net/ec-fullchain.pem", "/etc/ssl/letsencrypt/dox.quyo.net/ec-key.pem")
-- addDOHLocal("[::]:443", "/etc/ssl/letsencrypt/dox.quyo.net/ec-fullchain.pem", "/etc/ssl/letsencrypt/dox.quyo.net/ec-key.pem")

setACL('0.0.0.0/0')
addACL('::/0')

controlSocket('127.0.0.1:5199')
setConsoleACL('127.0.0.1/32')
setKey("gTTwvXcPDMqQH3PWDTxEiU5dggTaT9a7VJ2dsxJqszg=")

newServer("127.0.0.1:5353")
newServer("[::1]:5353")
setServerPolicy(firstAvailable) -- first server within its QPS limit


addAction(MaxQPSIPRule(40), DropAction())
addAction(NotRule(MaxQPSRule(200)), DropAction())

addAction(MaxQPSIPRule(20), DelayAction(200))
addAction(NotRule(MaxQPSRule(100)), DelayAction(200))

addAction(AndRule({MaxQPSIPRule(10), TCPRule(false)}), TCAction())
addAction(AndRule({NotRule(MaxQPSRule(50)), TCPRule(false)}), TCAction())
addAction(AndRule({QTypeRule(dnsdist.ANY), TCPRule(false)}), TCAction())



-- setMaxUDPOutstanding(65535)
-- setMaxTCPClientThreads(25)          -- set X(int) to handle number of maximum tcp clients
-- setMaxTCPConnectionDuration(10)     -- set X(int) for tcp connection duration from a connected client. X is number of seconds.
-- setMaxTCPConnectionsPerClient(5)    -- set X(int) for number of tcp connections from a single client. Useful for rate limiting the concurrent connections.
-- setMaxTCPQueriesPerConnection(20)   -- set X(int) , similiar to addAction(MaxQPSIPRule(X), DropAction())

-- local dbr = dynBlockRulesGroup()
-- dbr:excludeRange({"127.0.0.1/32", "::1/128" })
-- dbr:setQueryRate(50, 10, "Exceeded query rate", 60)
-- dbr:setRCodeRate(dnsdist.NXDOMAIN, 20, 10, "Exceeded NXD rate", 60)
-- dbr:setRCodeRate(dnsdist.SERVFAIL, 20, 10, "Exceeded ServFail rate", 60)
-- dbr:setQTypeRate(dnsdist.ANY, 5, 10, "Exceeded ANY rate", 60)
-- dbr:setResponseByteRate(100000, 10, "Exceeded response byte rate", 60)
--
-- function maintenance()
--     dbr:apply()
-- end
